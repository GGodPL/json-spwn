TAB = "  ";
op = {
    '"': '"',
    '[': ']',
    '{': '}'
}
DIGITS = "0123456789"
let stack = []
NUMBER_REG = @regex::new("^-?[0-9]+.?[0-9]*$")

@array::last = (self) {
    if (self.length == 0) {return null}
    return self[self.length - 1]
}

type @JSON
impl @JSON {
    stringify: (val: @string | @bool | @array | @dictionary | @number | @NULL, tabs: @number = 0, last:@bool=false, tabN:@number= 0) {
        return match val {
            @string: (TAB * tabs) + "\"{}\"".fmt(val),
            @number: (TAB * tabs) + "{}".fmt(val),
            @NULL: (TAB * tabs) + "{}".fmt("null"),
            @bool: (TAB * tabs) + "{}".fmt(val),
            @array: (){
                let temp = (TAB * tabs) + "[\n"
                let tabCount = tabN if tabs < tabN else tabs
                for i in 0..val.length {
                temp += @JSON::stringify(val[i], tabCount + 2, i == val.length - 1) + ("\n" if i == val.length - 1 else ",\n")
                }
                return temp + (TAB * ((tabCount + 1) if tabs < tabN else tabCount)) + "]"
            }(),
            @dictionary: (){
                let temp = (TAB * tabs) + "{\n"
                let keys = val.keys()
                let values = val.values()
                let tabCount = tabN if tabs < tabN else tabs
                for i in 0..values.length {
                    let val = values[i]
                    let key = keys[i]
                    temp += (TAB * (tabCount + 1)) + "\"{}\": ".fmt(keys[i]) + @JSON::stringify(values[i], 0, i == values.length - 1, tabs + 1) + ("\n" if i == values.length - 1 else ",\n")
                }
                return temp + (TAB * tabCount) + "}"
            }()
        }
    },
    parse: (str: @string) {
        let string = str
        string = string.trim(tokens = [' ', ','])
        if (string.length == 0) {return ""}
        if (NUMBER_REG.matches(string)) {
            return string as @number
        }
        return match string[0] {
            =="\"": string.substr(1, string.length - 1),
            =="[": @JSON::parseArray(string),
            =="{": @JSON::parseObject(string),
            =="t": true,
            =="f": false,
            =="u"||=="n": null,
            else: ""
        }
    },
    parseArray: (str: @string) {
        let lastComma = 0
        let output = []
        if (str.length < 3) {return output}
        let string = str.slice(2, str.length - 1)
        for i in 0..string.length {
            let char = string[i]
            if (stack.last() == "\\") {
                stack.pop()
                continue
            } else if (char == "\\") {
                stack.push("\\")
            }
            
            if (stack.last() == char && (char == "\"" || stack.last() != "\"")) {
                stack.pop()
            } else if (char in op.keys() && stack.last() != "\"") {
                stack.push(op[char])
            }
            
            if (stack.length == 0 && (char == "," || i == string.length - 1)) {
                output.push(@JSON::parse(string.substr(lastComma, i + 1)))
                lastComma = i + 1
            }
        }
        return output
    },
    parseObject: (str: @string) {
        let start = 0
        let output = {}
        if (str.length < 3) {return output}
        let string = str.trim(tokens=[" ", "{", "}"])
        let key = []
        let val = []
        for i in 0..string.length {
            let char = string[i]
            if (stack.last() == "\\") {
                stack.pop()
                continue
            } else if (char == "\\") {
                stack.push("\\")
            }
    
            if (stack.last() == char && (char == "\"" || stack.last() != "\"")) {
                stack.pop()
            } else if (char in op.keys() && stack.last() != "\"") {
                stack.push(op[char])
            }

            if (stack.length == 0) {
                if (char == ":") {
                    if (key.length > 0) {
                        key.pop()
                    }
                    key.push(@JSON::parse(string.substr(start - 1, i)))
                    start = i + 2
                } else if (char == "," || i == string.length - 1 ) {
                    if (val.length > 0) {
                        val.pop()
                    }
                    val.push(@JSON::parse(string.substr(start - 1, i + 1)))
                    start = i + 1
                    output.set(key.last(), val.last())
                }
            }
        }
        return output
    }
}
